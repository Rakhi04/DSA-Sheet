96. https://leetcode.com/problems/middle-of-the-linked-list/

approach, fast slow

                          class Solution {
                          public:
                              ListNode* middleNode(ListNode* head) {
                                  ListNode* fast=head,*slow=head;
                                  while(fast){

                                      if(fast->next)
                                      fast=fast->next->next;
                                      else break;
                                      slow=slow->next;            
                                  }
                                  return slow;
                              }
                          };
                          
                          
                          
                          
98. https://leetcode.com/problems/convert-binary-number-in-a-linked-list-to-integer/

recursion or bit manipulation 

                                int getDecimalValue(ListNode* head,int res=0) {
                                        // return head ? getDecimalValue(head->next,res*2 + head->val) : res;
                                        // int res=0;
                                        while(head){
                                            res<<=1;
                                            res|=head->val;
                                            head=head->next;
                                        }
                                        return res;
                                    }
                                    
                                    
                                    
                                    
                                    
110. https://leetcode.com/problems/copy-list-with-random-pointer/

Brute force :

                                                                     Node* copyRandomList(Node* head) {
                                                                            if(!head)return NULL;
                                                                            Node*start=new Node(head->val),*temp=start,*nxt=head->next;
                                                                            unordered_map<Node*,Node*>m;
                                                                            m[head]=start;
                                                                            while(nxt){
                                                                                temp->next=new Node(nxt->val);
                                                                                m[nxt]=temp->next;
                                                                                temp=temp->next;
                                                                                nxt=nxt->next;
                                                                            }
                                                                            temp->next=NULL;
                                                                            temp=start;
                                                                            while(head){
                                                                                if(head->random==NULL){
                                                                                    temp->random=NULL;
                                                                                }
                                                                                else{
                                                                                    temp->random=m[head->random];
                                                                                }
                                                                                temp=temp->next;
                                                                                head=head->next;
                                                                            }
                                                                            return start;
                                                                        }
                                    
                                    
make an unordered map of Node*old ptrt pointing to new ptr


better : add new pointers just after the old pointers then link randoms then link nexts


                                    
                                  if(!head)return NULL;
                                  Node*given=head,*required,*temp;
                                  while(given){
                                      temp=given->next;
                                      given->next=new Node(given->val);
                                      given->next->next=temp;
                                      given=given->next->next;
                                  }
                                  given=head;
                                  while(given){
                                      if(given->random)given->next->random=given->random->next;
                                      else given->next->random=NULL;
                                      given=given->next->next;
                                  }
                                  given=head;
                                  required=given->next;
                                  temp=required;
                                  while(required->next){
                                      given->next=required->next;
                                      given=given->next;
                                      required->next=given->next;
                                      required=required->next;
                                  }
                                  if(given)given->next=NULL;
                                  if(required)required->next=NULL;
                                  return temp;                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
