96. https://leetcode.com/problems/middle-of-the-linked-list/

approach, fast slow

                          class Solution {
                          public:
                              ListNode* middleNode(ListNode* head) {
                                  ListNode* fast=head,*slow=head;
                                  while(fast){

                                      if(fast->next)
                                      fast=fast->next->next;
                                      else break;
                                      slow=slow->next;            
                                  }
                                  return slow;
                              }
                          };
                          
                          
                          
                          
98. https://leetcode.com/problems/convert-binary-number-in-a-linked-list-to-integer/

recursion or bit manipulation 

                                int getDecimalValue(ListNode* head,int res=0) {
                                        // return head ? getDecimalValue(head->next,res*2 + head->val) : res;
                                        // int res=0;
                                        while(head){
                                            res<<=1;
                                            res|=head->val;
                                            head=head->next;
                                        }
                                        return res;
                                    }                        
